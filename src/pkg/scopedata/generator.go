package scopedata

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/AlecAivazis/survey/v2"
	"github.com/hashicorp/hcl/v2/hclwrite"
	"github.com/sirupsen/logrus"
	"github.com/spilliams/terraboots/internal/hclhelp"
)

// Generator objects can work with scope data, taking input from the user and
// saving the data to files.
type Generator interface {
	Run() ([]byte, error)
}

// generator stores an ordered list of scope types, a filename to store data to,
// and composes a Logger for debugging
type generator struct {
	scopeTypes []string
	*logrus.Entry
}

// NewGenerator builds a new Generator with the given scope types, destination
// filename, and logger.
func NewGenerator(scopeTypes []string, logger *logrus.Logger) Generator {
	return &generator{
		scopeTypes: scopeTypes,
		Entry:      logger.WithField("prefix", "scopedata"),
	}
}

// Run surveys the user about their scope value, and returns bytes representing
// an hcl file
func (g *generator) Run() ([]byte, error) {
	rootScopes, err := g.surveyForScopeValues()
	if err != nil {
		return nil, err
	}
	if len(rootScopes) == 0 {
		g.Warn("No scopes were generated, exiting.")
		return nil, nil
	}

	hclfile := g.generateScopeDataFile(rootScopes)
	return hclfile.Bytes(), nil
}

const answerRE = "[0-9a-zA-Z-_]"

var helpText = fmt.Sprintf("Answers must be space-separated, and may consist of the characters %s\n"+
	"Leave any answer blank to mark the current scope as complete with no children\n"+
	"Press Ctrl+C at any time to cancel.", answerRE)

// surveyForScopeValues uses the receiver's scopeTypes to ask the user for all
// the different values of the scopes.
// Returns a list of the top-level scope values (the scope values for the first
// scope type)
func (g *generator) surveyForScopeValues() ([]*NestedScope, error) {
	g.Infof("Scope types in this projct, in order, are: %s", strings.Join(g.scopeTypes, ", "))

	// First one's free
	firstValues, err := ask("What are the allowable scope values for `%s`?\n", g.scopeTypes[0])
	if err != nil {
		return nil, err
	}
	if len(firstValues) == 0 {
		g.Debugf("empty value, exiting")
		return nil, nil
	}
	if err := validate(firstValues); err != nil {
		return nil, err
	}
	g.Debugf("read new scope values %v", firstValues)

	roots := make([]*NestedScope, len(firstValues))
	prompts := make([]*NestedScope, len(firstValues))

	for i, el := range firstValues {
		value := &NestedScope{
			Name:           el,
			Type:           g.scopeTypes[0],
			scopeTypeIndex: 0,
			Children:       make([]*NestedScope, 0),
		}
		value.Address = fmt.Sprintf("%s.%s", value.Type, value.Name)
		roots[i] = value
		prompts[i] = value
	}

	for len(prompts) > 0 {
		prompt := prompts[0]
		prompts = prompts[1:]

		if prompt.scopeTypeIndex+1 == len(g.scopeTypes) {
			// this scope value cannot have children
			continue
		}

		values, err := ask("Within %s, what are the allowable scope values for `%s`?\n", prompt.Address, g.scopeTypes[prompt.scopeTypeIndex+1])
		if err != nil {
			return nil, err
		}

		if len(values) == 0 {
			g.Debugf("user entered no scope values for prompt, closing this scope")
			continue
		}

		if err := validate(values); err != nil {
			return nil, err
		}

		g.Debugf("read new scope values %v", values)

		for _, el := range values {
			value := &NestedScope{
				Name:           el,
				Type:           g.scopeTypes[prompt.scopeTypeIndex+1],
				scopeTypeIndex: prompt.scopeTypeIndex + 1,
				Children:       make([]*NestedScope, 0),
			}
			value.Address = strings.Join([]string{prompt.Address, string(value.Type), value.Name}, ".")
			prompt.Children = append(prompt.Children, value)
			prompts = append(prompts, value)
		}
	}

	g.Debugf("%+v", roots)

	return roots, nil
}

func ask(format string, a ...any) ([]string, error) {
	var value string
	err := survey.AskOne(&survey.Input{
		Message: fmt.Sprintf(format, a...),
		Help:    helpText,
	}, &value)
	if len(value) == 0 {
		return []string{}, err
	}
	return strings.Split(value, " "), err
}

func validate(answers []string) error {
	seen := make(map[string]bool)
	for _, answer := range answers {
		if len(answer) == 0 {
			return fmt.Errorf("Values cannot be blank (did you press space twice?)")
		}
		if _, ok := seen[answer]; ok {
			return fmt.Errorf("Cannot use the same scope value (%s) more than once for a single scope type", answer)
		}
		seen[answer] = true
		re := regexp.MustCompile(fmt.Sprintf("^%s+$", answerRE))
		if !re.MatchString(answer) {
			return fmt.Errorf("Scope value '%s' does not match valid character set %s", answer, answerRE)
		}
	}
	return nil
}

// generateScopeDataFile reads the given scopes and produces an `hclwrite.File`
// object that is ready to be written to disk.
func (g *generator) generateScopeDataFile(rootScopes []*NestedScope) *hclwrite.File {
	// TODO: now that Scopes are gohcl structs, can we write the file more simply?
	f := hclwrite.NewEmptyFile()
	rootBody := f.Body()

	rootBody.AppendUnstructuredTokens(hclhelp.CommentTokens("This file was generated by terraboots"))
	rootBody.AppendNewline()

	for _, root := range rootScopes {
		rootBody = addScopeValueToBody(root, rootBody)
	}

	return f
}

// addScopeValueToBody writes a new block representing the scope value to the
// given body. This is especially useful for writing nested scope values.
func addScopeValueToBody(scope *NestedScope, body *hclwrite.Body) *hclwrite.Body {
	childBlock := body.AppendNewBlock("scope", []string{string(scope.Type), scope.Name})
	childBody := childBlock.Body()
	for _, grandchild := range scope.Children {
		childBody = addScopeValueToBody(grandchild, childBody)
	}
	return body
}
